# -*- coding: utf-8 -*-
"""fish_multiclass.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oU65Zpb1yvQy2ZkcIdqUlT6mG_roNrbm
"""

# !git clone https://github.com/matterport/Mask_RCNN.git

# sudo python setup.py install
# pip show mask-rcnn

# !git clone https://github.com/Areeba-Seher04/fish_data

# !pip install mrcnn-colab

# !pip install --no-deps tensorflow==1.15.3

# !pip install --no-deps keras==2.2.4

# !pip install keras_applications

# !pip install tensorflow-estimator==1.15.1

# !unzip /content/fish_data/fishes.zip

# !pip install tensorboard==1.15.0

# !pip install gast==0.2.2

# split into train and test set
from os import listdir
from xml.etree import ElementTree
from numpy import zeros
from numpy import asarray
from numpy import expand_dims
from matplotlib import pyplot
from matplotlib.patches import Rectangle
from Mask_RCNN.mrcnn.utils import Dataset
from Mask_RCNN.mrcnn.visualize import display_instances
from Mask_RCNN.mrcnn.utils import extract_bboxes
from Mask_RCNN.mrcnn.model import mold_image
from Mask_RCNN.mrcnn.config import Config
from Mask_RCNN.mrcnn.model import MaskRCNN

# class that defines and loads the kangaroo dataset
class FishDataSet(Dataset):

  def load_dataset(self, dataset_dir):
    self.add_class("dataset", 1, "Shark -Selachimorpha-")
    self.add_class("dataset", 2, "surgeon")
    self.add_class("dataset", 3, "Carangidae -Jacks-")
    self.add_class("dataset", 4, "jack")
    self.add_class("dataset", 5, "Pomacentridae -Damselfishes-")
    self.add_class("dataset", 6, "Lutjanidae -Snappers-")
    self.add_class("dataset", 7, "Serranidae -Groupers-")
    self.add_class("dataset", 8, "parrot")
    self.add_class("dataset", 9, "shark")
    self.add_class("dataset", 10, "Scaridae -Parrotfishes-")
    self.add_class("dataset", 11, "snapper")
    self.add_class("dataset", 12, "Scombridae -Tunas-")
    self.add_class("dataset", 13, "tuna")
    self.add_class("dataset", 14, "Acanthuridae -Surgeonfishes-")
    self.add_class("dataset", 15, "grouper")
    
    images_dir = dataset_dir + '/images/'
    annotations_dir = dataset_dir + '/annotations/'
		# find all images
    for filename in listdir(images_dir):
			# extract image id
      image_id = filename.split("FishDataset")[1].split('_png')[0]
      image_id_2 = filename.split(".jpg")[0]
      
      img_path = images_dir + filename
      ann_path = annotations_dir + image_id_2 + '.xml'
			
			# add to dataset
      self.add_image(
          'dataset', image_id=image_id, path=img_path, annotation=ann_path,
          class_ids = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
          )
 
	# extract bounding boxes from an annotation file
  def extract_boxes(self, filename):
		# load and parse the file
    tree = ElementTree.parse(filename)
		# get the root of the document
    root = tree.getroot()
		# extract each bounding box
    boxes = list()
		# for box in root.findall('.//bndbox'):
    for box in root.findall('.//object'): #Change required
      print(">>>>box", box.find('name').text)
      name = box.find('name').text #Change required
      xmin = int(box.find('./bndbox/xmin').text)
      ymin = int(box.find('./bndbox/ymin').text)
      xmax = int(box.find('./bndbox/xmax').text)
      ymax = int(box.find('./bndbox/ymax').text)
			# coors = [xmin, ymin, xmax, ymax]
      coors = [xmin, ymin, xmax, ymax, name] #Change required
      boxes.append(coors)
		# extract image dimensions
    width = int(root.find('.//size/width').text)
    height = int(root.find('.//size/height').text)
    return boxes, width, height
 
	# load the masks for an image
  def load_mask(self, image_id):
    # get details of image
    info = self.image_info[image_id]
		# define box file location
    path = info['annotation']
		# load XML
    boxes, w, h = self.extract_boxes(path)
		# create one array for all masks, each on a different channel
    masks = zeros([h, w, len(boxes)], dtype='uint8')
		# create masks
    class_ids = list()
    for i in range(len(boxes)):
      box = boxes[i]
      row_s, row_e = box[1], box[3]
      col_s, col_e = box[0], box[2]
      if (box[4] == 'Shark -Selachimorpha-'): 
        masks[row_s:row_e, col_s:col_e, i] = 1
        class_ids.append(self.class_names.index('Shark -Selachimorpha-'))
      if (box[4] == 'surgeon'): 
        masks[row_s:row_e, col_s:col_e, i] = 2
        class_ids.append(self.class_names.index('surgeon'))
      if (box[4] == 'Carangidae -Jacks-'): 
        masks[row_s:row_e, col_s:col_e, i] = 3
        class_ids.append(self.class_names.index('Carangidae -Jacks-'))
      if (box[4] == 'jack'): 
        masks[row_s:row_e, col_s:col_e, i] = 4
        class_ids.append(self.class_names.index('jack'))
      if (box[4] == 'Pomacentridae -Damselfishes-'): 
        masks[row_s:row_e, col_s:col_e, i] = 5
        class_ids.append(self.class_names.index('Pomacentridae -Damselfishes-'))
      if (box[4] == 'Lutjanidae -Snappers-'): 
        masks[row_s:row_e, col_s:col_e, i] = 6
        class_ids.append(self.class_names.index('Lutjanidae -Snappers-'))
      if (box[4] == 'Serranidae -Groupers-'): 
        masks[row_s:row_e, col_s:col_e, i] = 7
        class_ids.append(self.class_names.index('Serranidae -Groupers-'))
      if (box[4] == 'parrot'): 
        masks[row_s:row_e, col_s:col_e, i] = 8
        class_ids.append(self.class_names.index('parrot'))
      if (box[4] == 'shark'): 
        masks[row_s:row_e, col_s:col_e, i] = 9
        class_ids.append(self.class_names.index('shark'))
      if (box[4] == 'Scaridae -Parrotfishes-'): 
        masks[row_s:row_e, col_s:col_e, i] = 10
        class_ids.append(self.class_names.index('Scaridae -Parrotfishes-'))
      if (box[4] == 'snapper'): 
        masks[row_s:row_e, col_s:col_e, i] = 11
        class_ids.append(self.class_names.index('snapper'))
      if (box[4] == 'Scombridae -Tunas-'): 
        masks[row_s:row_e, col_s:col_e, i] = 12
        class_ids.append(self.class_names.index('Scombridae -Tunas-'))
      if (box[4] == 'tuna'): 
        masks[row_s:row_e, col_s:col_e, i] = 13
        class_ids.append(self.class_names.index('tuna'))
      if (box[4] == 'Acanthuridae -Surgeonfishes-'): 
        masks[row_s:row_e, col_s:col_e, i] = 14
        class_ids.append(self.class_names.index('Acanthuridae -Surgeonfishes-'))
      if (box[4] == 'grouper'): 
        masks[row_s:row_e, col_s:col_e, i] = 14
        class_ids.append(self.class_names.index('grouper'))
    return masks, asarray(class_ids, dtype='int32')
 
	# load an image reference
  def image_reference(self, image_id):
    info = self.image_info[image_id]
    return info['path']

# train set
train_set = FishDataSet()
train_set.load_dataset('/content/fishes/train')
train_set.prepare()
print('Train: %d' % len(train_set.image_ids))
 
# test/val set
test_set = FishDataSet()
test_set.load_dataset('/content/fishes/validation')
test_set.prepare()
print('Test: %d' % len(test_set.image_ids))

# # define image id
# image_id = 10
# # load the image
# image = train_set.load_image(image_id)
# # load the masks and the class ids
# mask, class_ids = train_set.load_mask(image_id)
# # extract bounding boxes from the masks
# bbox = extract_bboxes(mask)
# # display image with masks and bounding boxes
# display_instances(image, bbox, mask, class_ids, train_set.class_names)

# # load an image
# image_id = 10
# image = train_set.load_image(image_id)
# print(image.shape)
# # load image mask
# mask, class_ids = train_set.load_mask(image_id)
# print(class_ids)
# plot image
# pyplot.imshow(image)
# # plot mask
# for i in range(len(class_ids)):
#   pyplot.imshow(mask[:, :, i], cmap='gray', alpha=0.5)
# pyplot.show()

class FishConfig(Config):
	# Give the configuration a recognizable name
	NAME = "fish_cfg"
	# Number of classes (background + fishes)
	NUM_CLASSES = 1 + 15
	# Number of training steps per epoch
	STEPS_PER_EPOCH = 329
 
# prepare config
config = FishConfig()

config.display()

# define the model
model = MaskRCNN(mode='training', model_dir='./', config=config)

model.load_weights('mask_rcnn_coco.h5', by_name=True, exclude=["mrcnn_class_logits", "mrcnn_bbox_fc",  "mrcnn_bbox", "mrcnn_mask"])

# train weights (output layers or 'heads')
model.train(train_set, test_set, learning_rate=config.LEARNING_RATE, epochs=5, layers='heads')

# history = model.keras_model.history.history

# import time
# model_path = '..\\Kangaroo\\kangaroo-master\\kangaroo-master\\mask_rcnn_'  + '.' + str(time.time()) + '.h5'
# model.keras_model.save_weights(model_path)

# from keras.preprocessing.image import load_img
# from keras.preprocessing.image import img_to_array
# #Loading the model in the inference mode
# model = modellib.MaskRCNN(mode="inference", config=config, model_dir='./')
# # loading the trained weights o the custom dataset
# model.load_weights(model_path, by_name=True)
# img = load_img("..\\Kangaroo\\kangaroo-master\\kangaroo-master\\images\\00042.jpg")
# img = img_to_array(img)
# # detecting objects in the image
# result= model.detect([img])

# Finally displaying the results

# image_id = 20
# image, image_meta, gt_class_id, gt_bbox, gt_mask =    modellib.load_image_gt(test_set, config, image_id, use_mini_mask=False)
# info = test_set.image_info[image_id]
# print("image ID: {}.{} ({}) {}".format(info["source"], info["id"], image_id, 
#                                        test_set.image_reference(image_id)))
# # Run object detection
# results = model.detect([image], verbose=1)
# # Display results

# r = results[0]
# visualize.display_instances(image, r['rois'], r['masks'], r['class_ids'], 
#                             test_set.class_names, r['scores'], 
#                             title="Predictions")

# # classes

# classes = ['Shark -Selachimorpha-', 'surgeon', 'Carangidae -Jacks-', 'jack', 'Pomacentridae -Damselfishes-', 'Lutjanidae -Snappers-', 'Serranidae -Groupers-', 'parrot', 'shark', 'Scaridae -Parrotfishes-', 'snapper', 'Scombridae -Tunas-', 'tuna', 'Acanthuridae -Surgeonfishes-', 'grouper']

# len(classes)

